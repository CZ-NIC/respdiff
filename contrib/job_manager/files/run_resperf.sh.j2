#!/bin/bash
set -o xtrace

JOBNAME=j$1.$2

exit_handler() {
    exitcode=$?
    docker-compose --no-ansi logs &>>${JOBNAME}_docker.txt || :
    docker-compose --no-ansi rm -fsv || :
    echo "$exitcode" > ${JOBNAME}_exitcode
    pushd logs
    for coredump in kresd*/core*; do
        test -f $coredump || continue
        docker run --entrypoint /bin/bash --network host -v "$PWD:/log:rw" knot-resolver:{{ git_sha }}{{ '-asan' if asan else '' }} -c "chmod +r /log/$coredump && gdb -ex 'bt' -batch -core /log/$coredump /var/opt/knot-resolver/.install/sbin/kresd" >&2
    done
    popd

    tar --use-compress-program=pigz -cf ${JOBNAME}_logs.tar.gz logs &>/dev/null || :
}
trap exit_handler EXIT

# HACK (condor): ensure files for transfer exist to avoid held jobs
touch ${JOBNAME}_docker.txt
touch ${JOBNAME}_resperf.txt
echo '1' > ${JOBNAME}_exitcode  # failed unless job exits with 0
mkdir logs
tar -czf ${JOBNAME}_logs.tar.gz -T /dev/null  # empty tar by default

# HACK (condor): Create proper dir structure
mkdir -p docker-knot-resolver || :
mv -t docker-knot-resolver/ Dockerfile kresd.entrypoint.sh || :

# HACK (condor): set PATH, otherwise docker-compose exec will fail
export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

# Check no other docker containers are running
if [ -n "$(docker ps -q)" ]; then
    echo "ERROR: running docker containers detected" >&2
    # remove machine from cluster until issue is manually resolved
    condor_off || :
    exit 2
fi

# Exit if any cmd fails from now on.
set -o errexit

# Prepare ssh key for knot-resolver-security
set +o xtrace
SSH_PRIVATE_KEY=$(cat </home/respdiff/.ssh/knot_resolver_security.id_rsa || :)
export SSH_PRIVATE_KEY
set -o xtrace

# Attempt to build containers (to have stdout/err logs in case of failure)
export KNOT_BRANCH={{ knot_branch }}
time docker-compose --no-ansi up --no-start

# Run resperf test repeatedly
for i in $(seq 3); do
    set +o xtrace
    echo "Waiting for ports..."
    # Ensure ports are empty, so we're not testing something else!
    MAX_RETRIES=30  # x5s
    {% for resolver in resolvers.values() -%}
    retries=0
    {% if resolver['port'] %}
    while [ ! -z "$(ss --all --no-header '( dport = :{{ resolver["port"] }} or sport = :{{ resolver["port"] }} )')" ]; do
        retries=$((retries+1))
        if (( $retries > $MAX_RETRIES )); then
            echo "ERROR: port {{ resolver['port'] }} not availble" >&2
            exit 2
        fi
        sleep 5
    done
    {% endif %}
    {% if resolver['tls_port'] %}
    retries=0
    while [ ! -z "$(ss --all --no-header '( dport = :{{ resolver["tls_port"] }} or sport = :{{ resolver["tls_port"] }} )')" ]; do
        retries=$((retries+1))
        if (( $retries > $MAX_RETRIES )); then
            echo "ERROR: port {{ resolver['tls_port'] }} not availble" >&2
            exit 2
        fi
        sleep 5
    done
    {% endif %}
    {% endfor %}
    set -o xtrace

    # Execute resperf
    docker-compose --no-ansi up -d
    docker run --network host registry.nic.cz/knot/respdiff/resperf:shortlist3 -q 500000 -m 10000 -C 200 -c 30 -d shortlist -t 15 -r 0 -s 127.0.0.1 -p {{ resperf['port'] }} &>>${JOBNAME}_resperf.txt
    docker-compose --no-ansi stop
    docker-compose --no-ansi ps | (! grep 'Exit [1-9]')
done
