#!/bin/bash
set -o xtrace

JOBNAME=j$1.$2

# HACK (condor): ensure files for transfer exist to avoid held jobs
touch ${JOBNAME}_report{,.diffrepro}.json
touch ${JOBNAME}_report{,.diffrepro}.txt
touch ${JOBNAME}_histogram.png
mkdir logs
tar -czf ${JOBNAME}_logs.tar.gz -T /dev/null  # empty tar by default

# HACK (condor): Create proper dir structure
mkdir -p docker-knot-resolver || :
mv -t docker-knot-resolver/ Dockerfile kresd.entrypoint.sh || :

# Check no other docker containers are running
if [ -n "$(docker ps -q)" ]; then
    echo "ERROR: running docker containers detected" >&2
    exit 2
fi

# Ensure ports are empty, so we're not testing something else!
set +o xtrace
echo "Waiting for ports..."
MAX_RETRIES=120
{% for resolver in resolvers.values() -%}
retries=0
{% if resolver['port'] %}
while [ ! -z "$(ss --all --no-header '( dport = :{{ resolver["port"] }} or sport = :{{ resolver["port"] }} )')" ]; do
    retries=$((retries+1))
    if (( $retries > $MAX_RETRIES )); then
        echo "ERROR: port {{ resolver['port'] }} not availble" >&2
        exit 2
    fi
    sleep 1
done
{% endif %}
{% if resolver['tls_port'] %}
retries=0
while [ ! -z "$(ss --all --no-header '( dport = :{{ resolver["tls_port"] }} or sport = :{{ resolver["tls_port"] }} )')" ]; do
    retries=$((retries+1))
    if (( $retries > $MAX_RETRIES )); then
        echo "ERROR: port {{ resolver['tls_port'] }} not availble" >&2
        exit 2
    fi
    sleep 1
done
{% endif %}
{% endfor %}
set -o xtrace

# Exit if any cmd fails from now on.
set -o errexit

cleanup() {
    docker-compose --no-ansi rm -fsv || :
    tar --use-compress-program=pigz -cf ${JOBNAME}_logs.tar.gz logs &>/dev/null || :
{%if database['remove_after'] %}
    rm -rf ./*.mdb || :
{% endif %}
}
trap cleanup EXIT

# Get database
wget --quiet -O {{ database['dest'] }} {{ database['url'] }}

# Prepare ssh key for knot-resolver-security
set +o xtrace
SSH_PRIVATE_KEY=$(cat </home/respdiff/.ssh/knot_resolver_security.id_rsa || :)
export SSH_PRIVATE_KEY
set -o xtrace

# Attempt to build containers (to have stdout/err logs in case of failure)
export KNOT_BRANCH={{ knot_branch }}
time docker-compose --no-ansi up --no-start >&2
# Start and wait for resolvers to be available
./restart-all.sh

# Run respdiff toolchain
time "{{ respdiff['srcdir'] }}/orchestrator.py" .
docker-compose --no-ansi stop  # give lingering connections time to close
time "{{ respdiff['srcdir'] }}/msgdiff.py" -d ${JOBNAME}_report.json .
cp ${JOBNAME}_report{,.diffrepro}.json
time "{{ respdiff['srcdir'] }}/diffrepro.py" -d ${JOBNAME}_report.diffrepro.json .
time "{{ respdiff['srcdir'] }}/diffsum.py" --without-diffrepro -d ${JOBNAME}_report.json . > ${JOBNAME}_report.txt
time "{{ respdiff['srcdir'] }}/diffsum.py" -d ${JOBNAME}_report.diffrepro.json . > ${JOBNAME}_report.diffrepro.txt
time "{{ respdiff['srcdir'] }}/histogram.py" -o ${JOBNAME}_histogram.png .
