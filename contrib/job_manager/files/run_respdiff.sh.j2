#!/bin/bash
set -o xtrace

JOBNAME=j$1.$2

# HACK (condor): ensure files for transfer exist to avoid held jobs
touch ${JOBNAME}_docker.txt
touch ${JOBNAME}_report{,.diffrepro}.json
touch ${JOBNAME}_report{,.diffrepro}.txt
touch ${JOBNAME}_histogram.tar.gz
if [ -f "stats.json" ]; then
    touch ${JOBNAME}_report.noref.json
    touch ${JOBNAME}_report.noref.txt
    # touch ${JOBNAME}_dnsviz.json.gz
    # touch ${JOBNAME}_report.noref.dnsviz.json
    # touch ${JOBNAME}_report.noref.dnsviz.txt
fi
mkdir logs
tar -czf ${JOBNAME}_logs.tar.gz -T /dev/null  # empty tar by default

# HACK (condor): Create proper dir structure
mkdir -p docker-knot-resolver || :
mv -t docker-knot-resolver/ Dockerfile kresd.entrypoint.sh || :

# Check no other docker containers are running
if [ -n "$(docker ps -q)" ]; then
    echo "ERROR: running docker containers detected" >&2
    # remove machine from cluster until issue is manually resolved
    condor_off || :
    exit 2
fi

# Ensure ports are empty, so we're not testing something else!
set +o xtrace
echo "Waiting for ports..."
MAX_RETRIES=120
{% for resolver in resolvers.values() -%}
retries=0
{% if resolver['port'] %}
while [ ! -z "$(ss --all --no-header '( dport = :{{ resolver["port"] }} or sport = :{{ resolver["port"] }} )')" ]; do
    retries=$((retries+1))
    if (( $retries > $MAX_RETRIES )); then
        echo "ERROR: port {{ resolver['port'] }} not availble" >&2
        exit 2
    fi
    sleep 1
done
{% endif %}
{% if resolver['tls_port'] %}
retries=0
while [ ! -z "$(ss --all --no-header '( dport = :{{ resolver["tls_port"] }} or sport = :{{ resolver["tls_port"] }} )')" ]; do
    retries=$((retries+1))
    if (( $retries > $MAX_RETRIES )); then
        echo "ERROR: port {{ resolver['tls_port'] }} not availble" >&2
        exit 2
    fi
    sleep 1
done
{% endif %}
{% endfor %}
set -o xtrace

# Exit if any cmd fails from now on.
set -o errexit

cleanup() {
    docker-compose --no-ansi ps
    docker-compose --no-ansi logs &>>${JOBNAME}_docker.txt || :
    docker-compose --no-ansi rm -fsv || :
    pushd logs
    for coredump in kresd*/core*; do
        test -r $coredump || continue
        docker run --entrypoint /bin/bash --network host -v "$PWD:/log:ro" -ti knot-resolver:{{ git_sha }}{{ '-asan' if asan else '' }} -c "gdb -ex 'bt' -batch -core /log/$coredump /var/opt/knot-resolver/.install/sbin/kresd"
    done
    popd

    tar --use-compress-program=pigz -cf ${JOBNAME}_logs.tar.gz logs &>/dev/null || :
{%if database['remove_after'] %}
    rm -rf ./*.mdb || :
{% endif %}
}
trap cleanup EXIT

# Get database
wget --quiet -O {{ database['dest'] }} {{ database['url'] }}

# Prepare ssh key for knot-resolver-security
set +o xtrace
SSH_PRIVATE_KEY=$(cat </home/respdiff/.ssh/knot_resolver_security.id_rsa || :)
export SSH_PRIVATE_KEY
set -o xtrace

# Attempt to build containers (to have stdout/err logs in case of failure)
export KNOT_BRANCH={{ knot_branch }}
time docker-compose --no-ansi up --no-start >&2
# Start and wait for resolvers to be available
./restart-all.sh

# Run respdiff toolchain
time "{{ respdiff['srcdir'] }}/orchestrator.py" .
docker-compose --no-ansi stop  # give lingering connections time to close
time "{{ respdiff['srcdir'] }}/msgdiff.py" -d ${JOBNAME}_report.json .
cp ${JOBNAME}_report{,.diffrepro}.json
time "{{ respdiff['srcdir'] }}/diffrepro.py" -d ${JOBNAME}_report.diffrepro.json .
time "{{ respdiff['srcdir'] }}/diffsum.py" --without-diffrepro -d ${JOBNAME}_report.json . > ${JOBNAME}_report.txt
time "{{ respdiff['srcdir'] }}/diffsum.py" -d ${JOBNAME}_report.diffrepro.json . > ${JOBNAME}_report.diffrepro.txt
if [ -f "stats.json" ]; then
    cp ${JOBNAME}_report{,.noref}.json
    time "{{ respdiff['srcdir'] }}/diffsum.py" -s stats.json --without-ref-failing --without-ref-unstable \
        -l 0 -d ${JOBNAME}_report.noref.json . > ${JOBNAME}_report.noref.txt
    "{{ respdiff['srcdir'] }}/qexport.py" --envdir . -f domain -o domains --failing ${JOBNAME}_report.noref.json
    # TODO: turn on once dnsviz is usable and safe to use in CI
    # https://gitlab.labs.nic.cz/knot/respdiff/issues/31
    # if [[ $(wc -l <domains) -le 1000 ]]; then
    #     time "{{ respdiff['srcdir'] }}/dnsviz.py" domains --dnsviz ${JOBNAME}_dnsviz.json
    #     cp ${JOBNAME}_report.noref{,.dnsviz}.json
    #     time "{{ respdiff['srcdir'] }}/diffsum.py" -s stats.json --without-ref-failing --without-ref-unstable \
    #         --dnsviz ${JOBNAME}_dnsviz.json --without-dnsviz-errors -l 0 \
    #         -d ${JOBNAME}_report.noref.dnsviz.json . > ${JOBNAME}_report.noref.dnsviz.txt
    #     gzip -f ${JOBNAME}_dnsviz.json
    # fi
fi
time "{{ respdiff['srcdir'] }}/histogram.py" -o ${JOBNAME}_histogram .
tar cf ${JOBNAME}_histogram.tar.gz ${JOBNAME}_histogram
